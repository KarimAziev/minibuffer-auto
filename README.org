* About

Enhances the default minibuffer completion experience in Emacs. It provides functionalities such as automatic command execution, inline previews of completion candidates, and easy navigation through minibuffer completion lists.

* minibuffer-auto                                                  :TOC_4_gh:
- [[#about][About]]
    - [[#manual][Manual]]
  - [[#usage][Usage]]

*** Manual

Download the source code and put it wherever you like, e.g. into =~/.emacs.d/minibuffer-auto/=

#+begin_src shell :eval no
git clone https://github.com/KarimAziev/minibuffer-auto.git ~/.emacs.d/minibuffer-auto/
#+end_src

Add the downloaded directory to the load path:

#+begin_src elisp :eval no
(add-to-list 'load-path "~/.emacs.d/minibuffer-auto/")
(require 'minibuffer-auto)
#+end_src

#+begin_src elisp :eval no
(use-package minibuffer-auto
  :straight (minibuffer-auto
             :repo "KarimAziev/minibuffer-auto"
             :type git
             :host github)
  :commands (minibuffer-auto-mode minibuffer-auto-crm-mode
                                  minibuffer-auto-preview-mode)
  :bind (:map minibuffer-local-completion-map
              ("C-v" . minibuffer-auto-scroll-completions-up)
              ("M-v" . minibuffer-auto-scroll-completions-down)
              ("M->" . minibuffer-auto-end-of-buffer)
              ("M-<" . minibuffer-auto-beg-of-buffer)))
#+end_src

** Usage

- =minibuffer-auto-mode=: Activates automatic completion features in the minibuffer. This mode sets up hooks to aid completion as you type, aiming to minimize the need for explicit user action and to provide a smoother completion experience.

- =minibuffer-auto-crm-mode=: Optimizes the =completing-read-multiple= function with automatic completion triggers. This mode is specifically helpful when dealing with multiple selections in the minibuffer, allowing for quicker and more efficient inputs.

- =minibuffer-auto-preview-mode=: Enables real-time previews of minibuffer completion candidates. As users type or navigate through the candidates, this mode updates the preview to reflect the current selection without the need to explicitly confirm it, facilitating a more dynamic and responsive interaction.
